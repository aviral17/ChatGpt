// "use client";

// import { ArrowDownCircleIcon } from "@heroicons/react/24/solid";
// import { collection, orderBy, query } from "firebase/firestore";
// import { useSession } from "next-auth/react";
// import { useCollection } from "react-firebase-hooks/firestore";
// import { db } from "../firebase";
// import Message from "./Message";
// import { useEffect, useRef, useState } from "react";
// import { RotatingLines } from "react-loader-spinner";

// type Props = {
//   chatId: string;
// };

// // here flex-1 will push down chatInput Box
// function Chat({ chatId }: Props) {
//   const { data: session } = useSession();

//   const chatContainerRef = useRef<HTMLDivElement>(null);
//   const [loading, setLoading] = useState(true);

//   // messages, loading, error
//   const [messages] = useCollection(
//     session &&
//       query(
//         collection(
//           db,
//           "users",
//           session?.user?.email!,
//           "chats",
//           chatId,
//           "messages"
//         ),
//         orderBy("createdAt", "asc")
//       )
//   );

// message.id or message.data from firebase

// useEffect(() => {
//   if (chatContainerRef.current) {
//     chatContainerRef.current.scrollTop =
//       chatContainerRef.current.scrollHeight;
//   }
// }, [messages]);

// // also scroll to bottom on mount
// useEffect(() => {
//   if (chatContainerRef.current) {
//     chatContainerRef.current.scrollTop =
//       chatContainerRef.current.scrollHeight;
//   }
// }, []);

/* ************************************* */
/* this /
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    setLoading(true);
  }, [chatId]);

  useEffect(() => {
    if (messages && !messages.empty) {
      setLoading(false);
    }
  }, [messages]);

  useEffect(() => {
    if (chatContainerRef.current && !loading) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages, loading]);

  /* this ************************************* */

/*  */

// useEffect(() => {
//   if (chatContainerRef.current && !loading) {
//     chatContainerRef.current.scrollTop =
//       chatContainerRef.current.scrollHeight;
//   }
// }, [messages, loading]);

// useEffect(() => {
//   setLoading(true);
// }, [chatId]);

// useEffect(() => {
//   if (messages && !messages.empty) {
//     setLoading(false);
//   }
// }, [messages]);

/*  */
// *****************************

// useEffect(() => {
//   if (chatContainerRef.current) {
//     chatContainerRef.current.scrollTop =
//       chatContainerRef.current.scrollHeight;
//   }
// }, [messages]);

// useEffect(() => {
//   setLoading(true);
// }, [chatId]);

// useEffect(() => {
//   if (messages && messages.size > 0) {
//     setLoading(false);
//   }
// }, [messages]);

// ****************************
//   console.log("Loading = ", loading);

//   return (
//     <div
//       className="flex-1 overflow-y-auto overflow-x-hidden"
//       ref={chatContainerRef}
//     >
//       {loading && (
//         <>
//           <p className="mt-10 text-center text-white">Loading messages...</p>
//         </>
//       )}
//       {!loading && messages?.empty && (
//         <>
//           <p className="mt-10 text-center text-white">
//             Type a prompt in below to get started!
//           </p>
//           <ArrowDownCircleIcon className="h-10 w-10 mx-auto mt-5 text-white animate-bounce" />{" "}
//           {/* We must also rotate arrow to make it cool */}
//         </>
//       )}

//       {/* without !loading then also messages?.docs working */}
//       {!loading &&
//         messages?.docs.map((message) => (
//           <Message key={message.id} message={message.data()} />
//         ))}
//     </div>
//   );
// }

// export default Chat;

"use client";

import { ArrowDownCircleIcon } from "@heroicons/react/24/solid";
import { collection, orderBy, query, DocumentData } from "firebase/firestore";
import { useSession } from "next-auth/react";
import { useCollection } from "react-firebase-hooks/firestore";
import { db } from "../firebase";
import Message from "./Message";
import { useEffect, useRef, useState } from "react";
import { RotatingLines } from "react-loader-spinner";
import firebase from "firebase/compat/app";

type Props = {
  chatId: string;
};

function Chat({ chatId }: Props) {
  const { data: session } = useSession();

  const chatContainerRef = useRef<HTMLDivElement>(null);
  const [loading, setLoading] = useState(true);
  const [prevMessages, setPrevMessages] =
    useState<firebase.firestore.QuerySnapshot | null>(null);

  const [messages] = useCollection(
    session &&
      query(
        collection(
          db,
          "users",
          session?.user?.email!,
          "chats",
          chatId,
          "messages"
        ),
        orderBy("createdAt", "asc")
      )
  );

  const isChatGPT = messages?.docs.map((message) => {
    if (message.data().user.name === "ChatGPT") {
      return true;
    }
  });
  console.log("MESSAGES = ", messages);

  // useEffect(() => {
  //   if (messages && messages !== prevMessages) {
  //     setPrevMessages(messages);

  //     if (messages.docs && messages.size > 0) {
  //       const lastMessageId = messages.docs[messages.size - 1].id;
  //       const lastMessageElement = document.getElementById(lastMessageId);

  //       if (lastMessageElement) {
  //         lastMessageElement.scrollIntoView({ behavior: "smooth" });
  //       }
  //     }

  //     if (chatContainerRef.current) {
  //       chatContainerRef.current.scrollTop =
  //         chatContainerRef.current.scrollHeight;
  //     }
  //   }
  // }, [messages, prevMessages]);

  // useEffect(() => {
  //   if (messages && messages.docs && messages.size > 0) {
  //     const lastMessageId = messages.docs[messages.size - 1].id;
  //     const lastMessageElement = document.getElementById(lastMessageId);

  //     if (lastMessageElement) {
  //       lastMessageElement.scrollIntoView({ behavior: "smooth" });
  //     }
  //   }

  //   if (chatContainerRef.current) {
  //     chatContainerRef.current.scrollTop =
  //       chatContainerRef.current.scrollHeight;
  //   }
  // }, [messages?.docs]);

  // useEffect(() => {
  //   console.log("Scrolling to last message");

  //   if (messages && messages.docs && messages.size > 0) {
  //     const lastMessageId = messages.docs[messages.size - 1].id;
  //     const lastMessageElement = document.getElementById(lastMessageId);

  //     // if (lastMessageElement) {
  //     //   lastMessageElement.scrollIntoView({ behavior: "smooth" });
  //     // }
  //   }

  //   // if (chatContainerRef.current) {
  //   //   chatContainerRef.current.scrollTop =
  //   //     chatContainerRef.current.scrollHeight;
  //   // }
  // }, [messages?.docs]);

  useEffect(() => {
    const chatContainer = chatContainerRef.current;
    if (chatContainer) {
      const isScrolledToBottom =
        chatContainer.scrollHeight - chatContainer.scrollTop ===
        chatContainer.clientHeight;
      if (isScrolledToBottom) {
        const maxScrollTop =
          document.body.scrollHeight - document.documentElement.clientHeight;
        window.scrollTo({ top: maxScrollTop, behavior: "smooth" });
      }
    }
  });

  useEffect(() => {
    setLoading(true);
  }, [chatId]);

  useEffect(() => {
    if (messages) {
      setLoading(false);
    }
  }, [messages]);

  return (
    <div
      className="flex-1 overlay overflow-y-auto overflow-x-hidden"
      ref={chatContainerRef}
    >
      {loading && (
        <div className="mt-10 text-center">
          <div>
            <RotatingLines
              strokeColor="grey"
              strokeWidth="2"
              animationDuration="0.75"
              width="96"
              visible={true}
            />
          </div>
          <p className="mt-10 text-center text-white">Loading messages...</p>
        </div>
      )}
      {!loading && messages?.empty && (
        <>
          <p className="mt-10 text-center text-white">
            Type a prompt in below to get started!
          </p>
          <ArrowDownCircleIcon className="h-10 w-10 mx-auto mt-5 text-white animate-bounce" />
        </>
      )}
      {/* {!loading &&
        messages?.docs.map((message) => (
          <Message key={message.id} message={message.data()} />
        ))} */}

      {!loading &&
        messages?.docs.map((message, index) => {
          const lmes = messages.docs[messages.size - 1].id;
          // console.log("last message id outside if{} = ", lmes);

          if (index === messages.docs.length - 1) {
            const lastMessageId = messages.docs[messages.size - 1].id;
            const lastMessageElement = document.getElementById(lastMessageId);

            // if (lastMessageElement) {
            //   lastMessageElement.scrollIntoView({ behavior: "smooth" });
            // }
          }

          return (
            <Message key={message.id} id={lmes} message={message.data()} />
          );
        })}
    </div>
  );
}

export default Chat;
