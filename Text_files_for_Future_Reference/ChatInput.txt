"use client";
/* ChatInput.tsx file */

// npm i @firebase/storage ----->    For IMAGE Storage

// npm install react-speech-recognition, For typescript use this ----> npm i --save-dev @types/react-speech-recognition
// import SpeechRecognition, {
//   useSpeechRecognition,
// } from "react-speech-recognition";

import { FormEvent, useState, useRef, useEffect } from "react";

// import { SlMicrophone } from "react-icons/sl";
// import { FaMicrophoneSlash } from "react-icons/fa";

import { ThreeDots } from "react-loader-spinner";
import { PaperAirplaneIcon } from "@heroicons/react/24/solid";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { addDoc, collection, serverTimestamp } from "firebase/firestore";

import { useSession } from "next-auth/react";
import { toast } from "react-hot-toast";
import { db } from "../firebase";
import useSWR from "swr";
// import ModelSelection from "./ModelSelection";
import { MdLibraryAdd } from "react-icons/md";

const Loader = () => {
  return (
    <ThreeDots
      height="40"
      width="40"
      radius="9"
      color="#4fa94d"
      ariaLabel="three-dots-loading"
      wrapperStyle={{}}
      // wrapperClassName=""
      visible={true}
    />
  );
};

type Props = {
  chatId: string;
};

function ChatInput({ chatId }: Props) {
  const [prompt, setPrompt] = useState("");
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [urls, setUrls] = useState("");
  const { data: session } = useSession();
  const [isUploading, setIsUploading] = useState(false);

  // data: model ----> "model" same that we declared in ModelSelection.tsx
  const { data: model } = useSWR("model", {
    fallbackData: "text-davinci-003",
  });

  // TODO: useSWR to get model
  // const model = "text-davinci-003";

  /* ************************ */

  async function shortenUrl(longUrl: any) {
    try {
      console.log("Inside try block of ChatInput");

      const response = await fetch(
        `https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=${process.env.FIREBASE_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            longDynamicLink: longUrl,
          }),
        }
      );
      if (!response.ok) {
        throw new Error(`An error occurred: ${response.statusText}`);
      }
      const data = await response.json();
      return data.shortLink;
    } catch (error) {
      console.error(error);
    }
  }

  const textareaRef = useRef<HTMLTextAreaElement>(null);
  useEffect(() => {
    if (textareaRef.current) {
      const textarea = textareaRef.current;
      textarea.rows = 1; // Set initial number of rows to 1
      const scrollHeight = textarea.scrollHeight;
      const lineHeight = parseInt(
        getComputedStyle(textarea).lineHeight.replace("px", "")
      );
      const rows = Math.min(Math.round(scrollHeight / lineHeight), 7); // Calculate number of rows based on content height and set maximum to 7
      textarea.rows = rows;
    }
  }, [prompt]);

  /* ************************ */

  /* ****************************************************************  */
  // const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
  //   if (e.target.files && e.target.files.length > 0) {
  //     const file = e.target.files[0];
  //     setImageFile(file);

  //     // setImageFile(e.target.files[0]);
  //     // console.log("Image file = ", e.target.files[0]);

  //     if (file) {
  //       // creating a reference to the image file in Firebase Cloud Storage
  //       const storage = getStorage();
  //       const storageRef = ref(storage, `images/${file.name}`);

  //       // uploading the image file to Firebase Cloud Storage
  //       await uploadBytes(storageRef, file);

  //       // getting a public URL for the uploaded image
  //       const url = await getDownloadURL(storageRef);
  //       console.log("Long url = ", url);

  //       // shorten the URL
  //       // const shortUrl = await shortenUrl(url);

  //       // console.log(url);
  //       setUrls(url);

  //       // updating the prompt state variable with the image URL
  //       setPrompt((prevPrompt) => `${prevPrompt} ${url}`.trim());

  //       // clear the selected image file
  //       setImageFile(null);
  //     }
  //   }
  // };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];

      // Check if the selected file is an image file
      if (!file.type.startsWith("image/")) {
        // Show an error message if the selected file is not an image file
        toast.error("Only image files are supported", {
          position: "top-center",
        });
        return;
      }

      setImageFile(file);

      if (file) {
        try {
          setIsUploading(true); // Set isUploading to true when the upload starts
          const storage = getStorage();
          const storageRef = ref(storage, `images/${file.name}`);
          await uploadBytes(storageRef, file);
          const url = await getDownloadURL(storageRef);
          console.log("Long url = ", url);
          setPrompt((prevPrompt) => `${prevPrompt} ${url}`.trim());
          setImageFile(null);
          setIsUploading(false); // Set isUploading back to false when the upload completes

          // Set focus back to the textarea element
          textareaRef.current?.focus();
        } catch (error) {
          console.log("catch occured");

          toast.error("Error occurred");
          setIsUploading(false);
        }
      }
    }
  };

  const handleUploadClick = async () => {
    // trigger click event on hidden file input
    const fileInput = document.getElementById("image-upload-input");
    if (fileInput) {
      fileInput.click();
    }

    if (!imageFile) return;

    // creating a reference to the image file in Firebase Cloud Storage
    // const storage = getStorage();
    // const storageRef = ref(storage, `images/${imageFile.name}`);

    // // uploading the image file to Firebase Cloud Storage
    // await uploadBytes(storageRef, imageFile);

    // // getting a public URL for the uploaded image
    // const url = await getDownloadURL(storageRef);
    // // console.log(url);
    // setUrls(url);

    // // updating the prompt state variable with the image URL
    // setPrompt((prevPrompt) => `${prevPrompt} ${url}`.trim());

    // // clear the selected image file
    // setImageFile(null);
    // };

    // ***** For Image Storage in Firebase Storage  //

    // const handleUpload = async () => {
    //   if (!imageFile) return;

    //   // create a reference to the image file in Firebase Cloud Storage
    //   const storage = getStorage();
    //   const storageRef = ref(storage, `images/${imageFile.name}`);

    //   // upload the image file to Firebase Cloud Storage
    //   await uploadBytes(storageRef, imageFile);

    //   // clear the selected image file
    //   setImageFile(null);
  };

  /* ******************************************************************** */

  const sendMessage = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!prompt) return;

    // const input = prompt.trim();
    const input = urls ? `${prompt} ${urls}`.trim() : prompt.trim();
    setPrompt("");

    console.log("User Input = ", input);
    const message: Message = {
      text: input,
      createdAt: serverTimestamp(),
      user: {
        _id: session?.user?.email!,
        name: session?.user?.name!,
        avatar:
          session?.user?.image! ||
          `https://ui-avatars.com/api/?name=${session?.user?.name}`,
      },
    };

    await addDoc(
      collection(
        db,
        "users",
        session?.user?.email || "",
        "chats",
        chatId,
        "messages"
      ),
      message
    );

    // Toast Notification to say Loading!
    const notification = toast.loading("ChatGPT is thinking...");

    await fetch("/api/askQuestion", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: input,
        chatId,
        model,
        session,
      }),
    }).then(() => {
      // Toast notification to say successful!

      toast.success("ChatGPT has responded!", {
        id: notification,
      });
    });
  };

  return (
    <div className="bg-gray-700/50 text-gray-400 rounded-2xl text-sm md:w-[51em] min-w-[450px] mb-[30px] inp-box mt-2">
      <form onSubmit={sendMessage} className="p-2 pr-4 space-x-5 flex">
        {/* <input
          className="bg-transparent focus:outline-none flex-1 disabled:cursor-not-allowed disabled:text-gray-300  whitespace-pre-wrap break-words"
          disabled={!session}
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          type="text"
          placeholder="Type your message here..."
        /> */}

        <textarea
          ref={textareaRef}
          className="bg-transparent focus:outline-none flex-1 disabled:cursor-not-allowed disabled:text-gray-300 whitespace-pre-wrap break-words resize-none pl-4 pt-2"
          disabled={!session}
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Type your message here..."
          style={{ overflow: "auto" }}
        ></textarea>
        {isUploading && <Loader />}

        <input
          id="image-upload-input"
          type="file"
          accept="image/*"
          onChange={handleFileChange}
          style={{ display: "none" }}
        />

        <button
          type="button"
          onClick={handleUploadClick}
          disabled={!session}
          className="hover:text-white h-10"
        >
          <MdLibraryAdd size={18} />
        </button>

        <button
          disabled={!prompt || !session}
          type="submit"
          className={`h-9  hover:opacity-50 text-white font-bold  py-[4px] px-[8px] mb-1 rounded transition duration-300 ${
            prompt && session ? "bg-green-400" : ""
          } disabled:-rotate-45 disabled:text-gray-600 disabled:cursor-not-allowed`}
        >
          <PaperAirplaneIcon className="h-5 w-5" />
        </button>
      </form>

      <div className="md:hidden">
        {/* Model Selection */}
        {/* <ModelSelection /> */}
      </div>
    </div>
  );
}

export default ChatInput;
